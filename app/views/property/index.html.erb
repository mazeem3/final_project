<!DOCTYPE html>
<html>
    <head>
        <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
        <meta charset="utf-8">
    </head>
    <body>
        <input id="pac-input" class="controls" type="text" placeholder="Search Box">
        <div id="map"></div>
        <script>

        function initMap() {
          var property = {
              lat: <%= @prime_lat %>,
              lng: <%= @prime_lon %>
          };
        var map = new google.maps.Map(document.getElementById('map'), {
          center: property,
          zoom: 13,
          mapTypeId: 'roadmap'
        });
        var contentString = '<div id="content"><div id="siteNotice"></div><h3 id="firstHeading" class="firstHeading"><%= @prime_address %></h3>'
        +'<div id="bodyContent"><p><b><%= @pa_bed %> bedrooms / <%= @pa_bath %> baths </b>, <b>Zestimate: <%= @pa_price %> </b>.</p>'
        var infowindow = new google.maps.InfoWindow({content: contentString});

        var service = new google.maps.places.PlacesService(map);

        var marker = new google.maps.Marker({position: property, map: map, title: 'Primary location'});
        marker.addListener('click', function () {
            infowindow.open(map, marker);
        });

        var size = gon.add.length
        for(i = 0; i <= size; i++)
        {
          var search_marker = new google.maps.Marker({
            position: {lat: parseFloat(gon.lat[i]), lng: parseFloat(gon.lng[i])},
            map: map,
            title: 'Primary location'});
        }






        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var places_infowindow = new google.maps.InfoWindow();
        var places_service = new google.maps.places.PlacesService(map);

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.

          var places_marker = new google.maps.Marker({
          map: map,
          icon: icon,
          title: place.name,
          position: place.geometry.location,
          placeId: place.place_id
        });
        markers.push(places_marker);
        google.maps.event.addListener(places_marker, 'click', function(evt) {

          service.getDetails({
            placeId: this.placeId
          }, (function(places_marker) {
            return function(place, status) {
              if (status === google.maps.places.PlacesServiceStatus.OK) {
                infowindow.setContent('<div><strong>' + place.name + '</strong><br>' +
                  place.formatted_address + '</div>');
                infowindow.open(map, places_marker);
              }
            }
          }(places_marker)));
        });


            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
      }

        </script>
        <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAjWDRMKvLrDwFxqutyccPKkJnn1PRg37g&libraries=places&callback=initMap" async defer></script>

    </body>
</html>
